#!/usr/bin/env node
import {EventEmitter}from'events';import {ServiceProvider,Application}from'@h3ravel/core';import {access,readFile,writeFile,mkdir}from'fs/promises';import d from'chalk';import g,{resolve,dirname}from'path';import {existsSync,statSync,readdirSync}from'fs';import te from'dayjs';import {arquebus}from'@h3ravel/arquebus';import {spawn}from'child_process';import {program}from'commander';import {ConfigServiceProvider}from'@h3ravel/config';import {DatabaseServiceProvider}from'@h3ravel/database';var Z=Object.defineProperty;var c=(m,e)=>Z(m,"name",{value:e,configurable:true});function F(m,e){let t=resolve(".",m),s;for(statSync(t).isDirectory()||(t=dirname(t));;){if(s=e(t,readdirSync(t)),s)return resolve(t,s);if(t=dirname(s=t),s===t)break}}c(F,"default");var Y=g.join,f=class{static{c(this,"Utils");}static textFormat(e,t){return String(e).split(":").map((s,i,r)=>i==0&&r.length>1?t(" "+s+": "):s).join("")}static output(){return {success:c((e,t=false)=>{console.log(d.green("\u2713"),this.textFormat(e,d.bgGreen),`
`),t&&process.exit(0);},"success"),info:c((e,t=false)=>{console.log(d.blue("\u2139"),this.textFormat(e,d.bgBlue),`
`),t&&process.exit(0);},"info"),error:c((e,t=true)=>{e instanceof Error?(e.message&&console.error(d.red("\u2716"),this.textFormat("ERROR:"+e.message,d.bgRed)),console.error(d.red(`${e.detail?`${e.detail}
`:""}${e.stack}`),`
`)):console.error(d.red("\u2716"),this.textFormat(e,d.bgRed),`
`),t&&process.exit(1);},"error"),split:c((e,t,s,i=false)=>{s??="info";let r={success:d.bgGreen,info:d.bgBlue,error:d.bgRed},a=/\x1b\[\d+m/g,n=Math.min(process.stdout.columns,100),o=Math.max(n-e.replace(a,"").length-t.replace(a,"").length-10,0);console.log(this.textFormat(e,r[s]),d.gray(".".repeat(o)),t),i&&process.exit(0);},"split"),quiet:c(()=>{process.exit(0);},"quiet")}}static findModulePkg(e,t){let s=e.replace(/\\/g,"/").split("/"),i="";s.length>0&&s[0][0]==="@"&&(i+=s.shift()+"/"),i+=s.shift();let r=g.join(t??process.cwd(),"node_modules",i),a=this.findUpConfig(r,"package",["json"]);if(a)return g.join(g.dirname(a),s.join("/"))}static async getMigrationPaths(e,t,s,i){return i?[Y(e,i)]:[...t.getPaths(),Y(e,s)]}static twoColumnDetail(e,t){let s=/\x1b\[\d+m/g,i=Math.min(process.stdout.columns,100),r=Math.max(i-e.replace(s,"").length-t.replace(s,"").length-10,0);return console.log(e,d.gray(".".repeat(r)),t)}static async fileExists(e){try{return await access(e),!0}catch{return  false}}static findUpConfig(e,t,s){return F(e,(i,r)=>{for(let a of s){let n=`${t}.${a}`;if(r.includes(n))return n}return  false})}},J=class D{static{c(this,"TableGuesser");}static CREATE_PATTERNS=[/^create_(\w+)_table$/,/^create_(\w+)$/];static CHANGE_PATTERNS=[/.+_(to|from|in)_(\w+)_table$/,/.+_(to|from|in)_(\w+)$/];static guess(e){for(let t of D.CREATE_PATTERNS){let s=e.match(t);if(s)return [s[1],true]}for(let t of D.CHANGE_PATTERNS){let s=e.match(t);if(s)return [s[2],false]}return []}};var k=class{static{c(this,"Command");}app;kernel;constructor(e,t){this.app=e,this.kernel=t;}signature;dictionary={};description;input={options:{},arguments:{}};async handle(...e){}setApplication(e){this.app=e;}setInput(e,t,s,i){this.dictionary=i,this.input.options=e,this.input.arguments=s.map((r,a)=>({[r.name()]:t[a]})).reduce((r,a)=>Object.assign(r,a),{});}getSignature(){return this.signature}getDescription(){return this.description}option(e,t){return this.input.options[e]??t}options(e){return e?this.input.options[e]:this.input.options}argument(e,t){return this.input.arguments[e]??t}arguments(){return this.input.arguments}};var I=class extends k{static{c(this,"MakeCommand");}signature=`#make:
        {controller : Generates a new controller class. | {--a|api : Generate an API resource controller} | {--force : Overide existing controller.} }
        {resource : Generates a new API resource class.}
        {migration : Generates a new database migration class. | {--l|type=ts : The file type to generate} | {--t|table : The table to migrate}  | {--c|create : The table to be created} }
        {factory : Generates a new database factory class.}
        {seeder : Generates a new database seeder class.}
        {model : Generates a new Arquebus model class. | {--t|type=ts : The file type to generate}} 
        {^name : The name of the [name] to generate}
    `;description="Generate component classes";async handle(){let e=this.dictionary.baseCommand,t={controller:"makeController",resource:"makeResource",migration:"makeMigration",factory:"makeFactory",seeder:"makeSeeder",model:"makeModel"};try{await this?.[t[e]]();}catch(s){this.kernel.output.error(s);}}async makeController(){let e=this.option("api")?"-resource":"",t=this.argument("name"),s=this.option("force"),i=g.join(app_path("Http/Controllers"),t+".ts"),r=f.findModulePkg("@h3ravel/http",this.kernel.cwd)??"",a=g.join(r,`dist/stubs/controller${e}.stub`);!s&&existsSync(i)&&this.kernel.output.error(`ERORR: ${t} controller already exists`);let n=await readFile(a,"utf-8");n=n.replace(/{{ name }}/g,t),await writeFile(i,n),this.kernel.output.split("INFO: Controller Created",d.gray(g.basename(i)));}makeResource(){this.kernel.output.success("Resource support is not yet available");}async makeMigration(){let e=this.argument("name"),t=te().format("YYYY_MM_DD_HHmmss"),s=g.join(database_path("migrations"),`${t}_${e}.ts`),i=f.findModulePkg("@h3ravel/database",this.kernel.cwd)??"",r=this.option("create",false),a=this.option("table");if(!a&&typeof r=="string"&&(a=r,r=true),!a){let l=J.guess(e);a=l[0],r=!!l[1];}let n=g.join(i,this.getMigrationStubName(a,r)),o=await readFile(n,"utf-8");a!==null&&(o=o.replace(/DummyTable|{{\s*table\s*}}/g,a)),this.kernel.output.info("INFO: Creating Migration"),await this.kernel.ensureDirectoryExists(g.dirname(s)),await writeFile(s,o),this.kernel.output.split("INFO: Migration Created",d.gray(g.basename(s)));}makeFactory(){this.kernel.output.success("Factory support is not yet available");}makeSeeder(){this.kernel.output.success("Seeder support is not yet available");}async makeModel(){let e=this.option("type","ts"),t=this.argument("name"),s=g.join(app_path("Models"),t.toLowerCase()+"."+e),i=f.findModulePkg("@h3ravel/database",this.kernel.cwd)??"",r=g.join(i,`dist/stubs/model-${e}.stub`),a=await readFile(r,"utf-8");a=a.replace(/{{ name }}/g,t),await writeFile(s,a),this.kernel.output.split("INFO: Model Created",d.gray(g.basename(s)));}getMigrationStubName(e,t=false,s="ts"){let i;return e?t?i=`migration.create-${s}.stub`:i=`migration.update-${s}.stub`:i=`migration-${s}.stub`,"dist/stubs/"+i}};var E=class extends k{static{c(this,"MigrateCommand");}signature=`migrate:
        {fresh : Drop all tables and re-run all migrations.}
        {install : Create the migration repository.}
        {refresh : Reset and re-run all migrations.}
        {reset : Rollback all database migrations.}
        {rollback : Rollback the last database migration.}
        {status : Show the status of each migration.}
        {publish : Publish any migration files from installed packages.}
        {^--s|seed : Seed the database}
    `;description="Run all pending migrations.";async handle(){let e=this.dictionary.name??this.dictionary.baseCommand;await this?.[{migrate:"migrateRun",fresh:"migrateFresh",install:"migrateInstall",refresh:"migrateRefresh",reset:"migrateReset",rollback:"migrateRollback",status:"migrateStatus",publish:"migratePublish"}[e]]();}async migrateRun(){this.kernel.output.success("Running migrations are not yet supported.");}async migrateFresh(){this.kernel.output.success("Drop all tables and re-run all migrations.");}async migrateInstall(){this.kernel.output.success("Create the migration repository.");}async migrateRefresh(){this.kernel.output.success("Resetting and re-running migrations is not yet supported.");}async migrateReset(){this.kernel.output.success("Rolling back all migration is not yet supported.");}async migrateRollback(){this.kernel.output.success("Rolling back the last migration is not yet supported.");}async migrateStatus(){app_path();console.log(arquebus.connection()),this.kernel.output.success("Show the status of each migration.");}async migratePublish(){this.kernel.output.success("Publish any migration files from installed packages.");}};var T=class extends k{static{c(this,"ServeCommand");}signature="serve";description="Start the Developement Server";async handle(){try{await this.serve();}catch(e){this.kernel.output.error(e);}}async serve(){let e=spawn("tsup-node",{stdio:"inherit",shell:true,env:Object.assign({},process.env,{NODE_ENV:"development"}),detached:true}),t=c(()=>{console.log(111),e.pid&&process.kill(e.pid,"SIGTERM");},"cleanup");process.on("SIGINT",()=>e.kill("SIGINT")),process.on("SIGTERM",()=>e.kill("SIGTERM")),process.on("SIGINT",()=>{t(),process.exit(0);}),process.on("SIGTERM",()=>{t(),process.exit(0);});}};var N=class m{static{c(this,"Signature");}static parseOptions(e){let t=[],s=/\{([^{}]+(?:\{[^{}]*\}[^{}]*)*)\}/g,i;for(;(i=s.exec(e))!==null;){let r=i[1][0]==="^"||/:[#^]/.test(i[1]),a=(["#","^"].includes(i[1][0])||/:[#^]/.test(i[1]))&&!r,n=i[1].trim().replace(/[#^]/,""),o=n.indexOf(":");if(o===-1){t.push({name:n});continue}let l=n.substring(0,o).trim(),p=n.substring(o+1).trim(),x=p,R,G=p.indexOf("|");if(G!==-1){x=p.substring(0,G).trim();let u=p.substring(G+1).trim().replace(/^\{/,"").trim();R=m.parseOptions("{"+u+"}");}else x=x.trim();let h=l,v=/[^a-zA-Z0-9_|-]/.test(h),O=false;h.endsWith("?*")?(v=false,O=true,h=h.slice(0,-2)):h.endsWith("*")?(O=true,h=h.slice(0,-1)):h.endsWith("?")&&(v=false,h=h.slice(0,-1));let A=h.startsWith("--"),w,C;if(A){let z=h.split("|").map(u=>u.trim());w=[];for(let u of z){u.startsWith("--")&&u.slice(2).length===1?u="-"+u.slice(2):u.startsWith("-")&&!u.startsWith("--")&&u.slice(1).length>1?u="--"+u.slice(1):!u.startsWith("-")&&u.slice(1).length>1&&(u="--"+u);let _=u.indexOf("=");if(_!==-1){w.push(u.substring(0,_));let b=u.substring(_+1);b==="*"?C=[]:b==="true"||b==="false"||!b&&!v?C=b==="true":isNaN(Number(b))?C=b:C=Number(b);}else w.push(u);}}t.push({name:A?w[w.length-1]:h,required:v,multiple:O,description:x,flags:w,shared:r,isFlag:A,isHidden:a,defaultValue:C,nestedOptions:R});}return t}static parseSignature(e,t){let s=e.split(`
`).map(p=>p.trim()).filter(p=>p.length>0),i=["#","^"].includes(s[0][0])||/:[#^]/.test(s[0]),r=s[0].replace(/[^\w=:-]/g,""),a=t.getDescription(),n=r.endsWith(":"),o=s.slice(1).join(" "),l=m.parseOptions(o);return n?{baseCommand:r.slice(0,-1),isNamespaceCommand:n,subCommands:l.filter(p=>!p.flags&&!p.isHidden),description:a,commandClass:t,options:l.filter(p=>!!p.flags),isHidden:i}:{baseCommand:r,isNamespaceCommand:n,options:l,description:a,commandClass:t,isHidden:i}}};var M=class m{static{c(this,"Musket");}app;kernel;output=f.output();commands=[];constructor(e,t){this.app=e,this.kernel=t;}async build(){return this.loadBaseCommands(),await this.loadDiscoveredCommands(),this.initialize()}loadBaseCommands(){[new T(this.app,this.kernel),new I(this.app,this.kernel),new E(this.app,this.kernel)].forEach(t=>this.addCommand(t));}async loadDiscoveredCommands(){[].forEach(t=>this.addCommand(t));}addCommand(e){this.commands.push(N.parseSignature(e.getSignature(),e));}initialize(){let e=["H3ravel Version:",d.green(this.kernel.consolePackage.version)].join(" "),t=["Musket Version:",d.green(this.kernel.modulePackage.version||"None")].join(" ");program.name("musket").version(`${e}
${t}`),program.command("init").description("Initialize H3ravel.").action(async()=>{this.output.success("Initialized: H3ravel has been initialized!");});for(let s=0;s<this.commands.length;s++){let i=this.commands[s],r=i.commandClass;if(i.isNamespaceCommand&&i.subCommands){let a=i.isHidden?program:program.command(i.baseCommand).description(i.description??"").action(async()=>{r.setInput(a.opts(),a.args,a.registeredArguments,i),await r.handle();});(i.options?.length??0)>0&&i.options?.filter((n,o,l)=>l.findIndex(p=>p.name===n.name)===o).forEach(n=>{this.makeOption(n,a);}),i.subCommands.filter((n,o,l)=>!n.shared&&l.findIndex(p=>p.name===n.name)===o).forEach(n=>{let o=program.command(`${i.baseCommand}:${n.name}`).description(n.description||"").action(async()=>{r.setInput(o.opts(),o.args,o.registeredArguments,n),await r.handle();});i.subCommands?.filter(l=>l.shared).forEach(l=>{this.makeOption(l,o,false,n);}),i.options?.filter(l=>l.shared).forEach(l=>{this.makeOption(l,o,false,n);}),n.nestedOptions&&n.nestedOptions.filter((l,p,x)=>x.findIndex(R=>R.name===l.name)===p).forEach(l=>{this.makeOption(l,o);});});}else {let a=program.command(i.baseCommand).description(i.description??"");i?.options?.filter((n,o,l)=>l.findIndex(p=>p.name===n.name)===o).forEach(n=>{this.makeOption(n,a,true);}),a.action(async()=>{r.setInput(a.opts(),a.args,a.registeredArguments,i),await r.handle();});}}return program}makeOption(e,t,s,i){let r=e.description?.replace(/\[(\w+)\]/g,(n,o)=>i?.[o]??`[${o}]`)??"",a=e.name.replaceAll("-","");if(e.isFlag)if(s){let n=e.flags?.map(o=>o.length===1?`-${o}`:`--${o}`).join(", ");t.option(n||"",r,String(e.defaultValue)||void 0);}else t.option(e.flags?.join(", ")+(e.required?` <${a}>`:""),r,e.defaultValue);else t.argument(e.required?`<${e.name}>`:`[${e.name}]`,r,e.defaultValue);}static async parse(e){return (await new m(e.app,e).build()).parseAsync()}};var P=class m{static{c(this,"Kernel");}app;cwd;output=f.output();basePath="";modulePath;consolePath;modulePackage;consolePackage;constructor(e,t){this.app=e;}static init(e){let t=new m(e);Promise.all([t.loadRequirements()]).then(([s])=>s.run());}async run(){await M.parse(this),process.exit(0);}async ensureDirectoryExists(e){await mkdir(e,{recursive:true});}async loadRequirements(){this.cwd=g.join(process.cwd(),this.basePath),this.modulePath=f.findModulePkg("@h3ravel/core",this.cwd)??"",this.consolePath=f.findModulePkg("@h3ravel/console",this.cwd)??"";try{this.modulePackage=await import(g.join(this.modulePath,"package.json"));}catch{this.modulePackage={version:"N/A"};}try{this.consolePackage=await import(g.join(this.consolePath,"package.json"));}catch{this.consolePackage={version:"N/A"};}return this}};var $=class extends ServiceProvider{static{c(this,"ConsoleServiceProvider");}static priority=992;register(){P.init(this.app);}};var L=[ConfigServiceProvider,DatabaseServiceProvider,$];var j=class{static{c(this,"default");}async bootstrap(){let m=new Application(process.cwd());m.registerProviders(L),await m.registerConfiguredProviders(),await m.boot(),new EventEmitter().once("SIGINT",()=>process.exit(0)),process.on("SIGINT",()=>{process.exit(0);}),process.on("SIGTERM",()=>{process.exit(0);});}};new j().bootstrap();new EventEmitter().once("SIGINT",()=>process.exit(0));